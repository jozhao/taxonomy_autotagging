<?php

/**
 * @file
 * Taxonomy Auto Tagging module.
 */

/**
 * The default settings.
 */
define('TAT_TABLE_SETTING', 'taxonomy_autotagging_setting');
define('TAT_TABLE_NODE', 'taxonomy_autotagging_node');

// Load the helper file.
module_load_include('inc', 'taxonomy_autotagging', 'includes/taxonomy_autotagging.lib');
module_load_include('inc', 'taxonomy_autotagging', 'includes/taxonomy_autotagging.batch');

/**
 * Implements hook_help().
 */
function taxonomy_autotagging_help($section) {
  switch ($section) {
    case 'admin/help#search':
      return t('Automatically analysis and process the nodes text by matching the terms (and synonyms) against the content of textual fields.');
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function taxonomy_autotagging_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if ($form['#field']['type'] != 'taxonomy_term_reference') {
    return;
  }
  $form['taxonomy_autotagging'] = array(
    '#type' => 'fieldset',
    '#title' => t('Taxonomy Auto Tagging'),
    '#description' => t('Automatically analysis the nodes text by matching the taxonomy terms.'),
    'taxonomy_autotagging_active' => array(
      '#type' => 'radios',
      '#title' => t('Active/Disactive the Taxonomy Auto Tagging'),
      '#description' => t('You can enable/disable if the Taxonomy Auto Tagging applying in this vocabulary'),
      '#options' => array(
        '0' => t('Disabled'),
        '1' => t('Enabled'),
      ),
      '#default_value' => isset($form['#instance']['settings']['taxonomy_autotagging_active']) ? $form['#instance']['settings']['taxonomy_autotagging_active'] : 0,
    ),
  );
  $fields = array(
    'taxonomy_autotagging_run' => array(
      '#type' => 'submit',
      '#value' => t('Run the taxonomy auto tagging'),
      '#suffix' => '<span class="description">' . t('Could take time and could put an increased load on your server.') . '</span>',
    ),
    'taxonomy_autotagging_case' => array(
      '#type' => 'checkbox',
      '#title' => t('Case sensitive'),
      '#description' => t('Default setting is case insensitive, and the text will be conveted to lower case before matching.'),
      '#default_value' => isset($form['#instance']['settings']['taxonomy_autotagging_case']) ? $form['#instance']['settings']['taxonomy_autotagging_case'] : 0,
    ),
    'taxonomy_autotagging_storage' => array(
      '#type' => 'checkbox',
      '#title' => t('Saving the matching results in database'),
      '#description' => t('By saving the results in database, it can be used via API for rendering etc. This setting only works with the preg_match method.'),
      '#default_value' => isset($form['#instance']['settings']['taxonomy_autotagging_storage']) ? $form['#instance']['settings']['taxonomy_autotagging_storage'] : 0,
    ),
    'taxonomy_autotagging_mode' => array(
      '#type' => 'radios',
      '#title' => t('Apply terms automatically by the following method'),
      '#description' => t('Taxonomy Auto Tagging can analysis the matching terms/synonyms via different method'),
      '#options' => array(
        '0' => t('Match term(s) via strpos (fastest matching but the matching term cannot be caught)'),
        '1' => t('Match term(s) with Plural/Singular support via strpos'),
        '2' => t('Match term(s) via preg_match (The matching term(s) can be saved in table for further usage such as rendering)'),
        '3' => t('Match term(s) with Plural/Singular support via preg_match and regular expressions (Slower but provides better results)'),
        '4' => t('Match term(s) with Plural/Singular support via preg_match (Slowest but provides better results)'),
      ),
      '#default_value' => isset($form['#instance']['settings']['taxonomy_autotagging_mode']) ? $form['#instance']['settings']['taxonomy_autotagging_mode'] : 3,
    ),
  );
  // Add the fields to form.
  $form['taxonomy_autotagging']['taxonomy_autotagging_run'] = $fields['taxonomy_autotagging_run'];
  $form['taxonomy_autotagging']['taxonomy_autotagging_case'] = $fields['taxonomy_autotagging_case'];
  $form['taxonomy_autotagging']['taxonomy_autotagging_storage'] = $fields['taxonomy_autotagging_storage'];
  $form['taxonomy_autotagging']['taxonomy_autotagging_mode'] = $fields['taxonomy_autotagging_mode'];
  if (module_exists('synonyms') && function_exists('synonyms_get_term_synonyms')) {
    $fields['taxonomy_autotagging_synonyms'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable the taxonomy synonyms support'),
      '#description' => t('Taxonomy auto tagging will check the taxonomy terms synonyms.'),
      '#default_value' => isset($form['#instance']['settings']['taxonomy_autotagging_synonyms']) ? $form['#instance']['settings']['taxonomy_autotagging_synonyms'] : 1,
    );
    $form['taxonomy_autotagging']['taxonomy_autotagging_synonyms'] = $fields['taxonomy_autotagging_synonyms'];
  }
  $form['#submit'][] = '_taxonomy_autotagging_settings_form_submit';
}

/**
 * Form callback to update the configurations.
 */
function _taxonomy_autotagging_settings_form_submit($form, &$form_state) {
  $instance = & $form_state['values']['instance'];
  $instance['settings']['taxonomy_autotagging_active'] = $form_state['values']['taxonomy_autotagging_active'];
  $instance['settings']['taxonomy_autotagging_case'] = $form_state['values']['taxonomy_autotagging_case'];
  $instance['settings']['taxonomy_autotagging_mode'] = $form_state['values']['taxonomy_autotagging_mode'];
  $instance['settings']['taxonomy_autotagging_storage'] = $form_state['values']['taxonomy_autotagging_storage'];
  if (module_exists('synonyms') && function_exists('synonyms_get_term_synonyms')) {
    $instance['settings']['taxonomy_autotagging_synonyms'] = $form_state['values']['taxonomy_autotagging_synonyms'];
  }
  field_update_instance($instance);

  if ($form_state['values']['op'] == t('Run the taxonomy auto tagging')) {
    _taxonomy_autotagging_process_all($instance);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function taxonomy_autotagging_form_node_form_alter(&$form, &$form_state) {
  $field_info = field_info_instances();
  if (isset($field_info['node'][$form['type']['#value']])) {
    $options = array();
    $default_value = array();
    foreach ($field_info['node'][$form['type']['#value']] as $field) {
      if (isset($field['settings']['taxonomy_autotagging_active']) && $field['settings']['taxonomy_autotagging_active'] == '1') {
        // Build the TAT form options.
        $option = array($field['field_name'] => $field['label']);
        $options = array_merge($options, $option);
        // Query the table to get the current node TAT setting.
        $query = db_select(TAT_TABLE_SETTING, 'tat');
        $status = $query->condition('entity_id', $form['nid'])
          ->condition('field_name', $field['field_name'])
          ->fields('tat', array('status'))
          ->execute();
        $status_value = $status->fetchField();
        if ($status_value == 1) {
          $default_value[] = $field['field_name'];
        }
      }
    }
    // Build the TAT settings form.
    if (!empty($options)) {
      $form['taxonomy_autotagging_active'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Enable Taxonomy Auto Tagging with this vocabulary in this node?'),
        '#options' => $options,
        '#default_value' => $default_value,
      );
      $form['#submit'][] = '_taxonomy_autotagging_setting_form_submit';
    }
  }
}

/**
 * Implements hook_nodeapi().
 */
function taxonomy_autotagging_node_insert($node) {
  if (isset($node->nid) && isset($node->taxonomy_autotagging_active) && !empty($node->taxonomy_autotagging_active)) {
    foreach ($node->taxonomy_autotagging_active as $field_name => $field_value) {
      $status = 0;
      if (check_plain($field_name) == check_plain($field_value)) {
        $status = 1;
      }
      $taxonomy_autotagging_field_config = array(
        'entity_type' => 'node',
        'entity_id' => $node->nid,
        'language' => $node->language,
        'bundle' => $node->type,
        'field_name' => $field_name,
        'status' => $status,
        'changed' => REQUEST_TIME,
      );
      _taxonomy_autotagging_write_single_config($taxonomy_autotagging_field_config);
    }
  }
}

/**
 * Node form callback to update the setting for single node.
 */
function _taxonomy_autotagging_setting_form_submit($form, &$form_state) {
  if (isset($form_state['values']['nid'])) {
    $op = $form_state['values']['op'];
    if ($op == 'Save') {
      // Prepare the taxonomy autotagging fields.
      $field_info = field_info_instances();
      foreach ($field_info['node'][$form['type']['#value']] as $field) {
        if (isset($field['settings']['taxonomy_autotagging_active']) && $field['settings']['taxonomy_autotagging_active'] == '1') {
          if (isset($form_state['values']['taxonomy_autotagging_active'][$field['field_name']])) {
            $taxonomy_autotagging_field_config = array(
              'entity_type' => $field['entity_type'],
              'entity_id' => $form_state['values']['nid'],
              'language' => $form_state['values']['language'],
              'bundle' => $field['bundle'],
              'field_name' => $field['field_name'],
              'status' => $form_state['values']['taxonomy_autotagging_active'][$field['field_name']],
              'changed' => REQUEST_TIME,
            );
            // Save them into database.
            if (is_array($taxonomy_autotagging_field_config) && !empty($taxonomy_autotagging_field_config)) {
              _taxonomy_autotagging_write_single_config($taxonomy_autotagging_field_config);
            }
          }
        }
      }
    }
  }
}

/**
 * Save the settings.
 */
function _taxonomy_autotagging_write_single_config($taxonomy_autotagging_field_config) {
  $existing = db_select('taxonomy_autotagging_setting', 'tan')
    ->condition('entity_id', $taxonomy_autotagging_field_config['entity_id'])
    ->condition('field_name', $taxonomy_autotagging_field_config['field_name'], 'like')
    ->fields('tan', array('status'))->execute();
  if ($existing->fetchField() === FALSE) {
    db_insert('taxonomy_autotagging_setting')->fields($taxonomy_autotagging_field_config)->execute();
  }
  else {
    db_update('taxonomy_autotagging_setting')->fields($taxonomy_autotagging_field_config)
      ->condition('entity_id', $taxonomy_autotagging_field_config['entity_id'])
      ->condition('field_name', $taxonomy_autotagging_field_config['field_name'], 'like')->execute();
  }
}
